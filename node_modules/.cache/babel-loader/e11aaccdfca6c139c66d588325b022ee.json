{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { omit } from 'lodash';\n\nconst useForm = () => {\n  _s();\n\n  //Form values\n  const [values, setValues] = useState({}); //Errors\n\n  const [errors, setErrors] = useState({});\n\n  const validate = (event, name, value) => {\n    //A function to validate each input values\n    switch (name) {\n      case 'username':\n        if (value.length <= 4) {\n          // we will set the error state\n          setErrors({ ...errors,\n            username: 'Username atleast have 5 letters'\n          });\n        } else {\n          // set the error state empty or remove the error for username input\n          //omit function removes/omits the value from given object and returns a new object\n          let newObj = omit(errors, \"username\");\n          setErrors(newObj);\n        }\n\n        break;\n\n      case 'email':\n        if (!new RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/).test(value)) {\n          setErrors({ ...errors,\n            email: 'Enter a valid email address'\n          });\n        } else {\n          let newObj = omit(errors, \"email\");\n          setErrors(newObj);\n        }\n\n        break;\n\n      case 'password':\n        if (!new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/).test(value)) {\n          setErrors({ ...errors,\n            password: 'Password should contains atleast 8 charaters and containing uppercase,lowercase and numbers'\n          });\n        } else {\n          let newObj = omit(errors, \"password\");\n          setErrors(newObj);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }; //A method to handle form inputs\n\n\n  const handleChange = event => {\n    //To stop default events    \n    event.persist();\n    let name = event.target.name;\n    let val = event.target.value;\n    validate(event, name, val); //Let's set these values in state\n\n    setValues({ ...values,\n      [name]: val\n    });\n  };\n\n  return {\n    values,\n    errors,\n    handleChange\n  };\n};\n\n_s(useForm, \"oIbDGYi0uOTpTzOl9U/+/w4jPVs=\");\n\nexport default useForm;","map":{"version":3,"names":["React","useState","omit","useForm","values","setValues","errors","setErrors","validate","event","name","value","length","username","newObj","RegExp","test","email","password","handleChange","persist","target","val"],"sources":["/home/divum/Desktop/Project Divum/PM Tool/pmo-dashboard-web/src/App/Components/ProjectDetailsPage/WeeklyUpdate.js"],"sourcesContent":["\nimport React,{ useState } from 'react'\nimport {omit} from 'lodash'\n\n\nconst useForm = () => {\n    \n    //Form values\n    const [values, setValues] = useState({});\n    //Errors\n    const [errors, setErrors] = useState({});\n    \n    \n    const validate = (event, name, value) => {\n        //A function to validate each input values\n\n        switch (name) {\n            case 'username':\n                if(value.length <= 4){\n                    // we will set the error state\n\n                    setErrors({\n                        ...errors,\n                        username:'Username atleast have 5 letters'\n                    })\n                }else{\n                    // set the error state empty or remove the error for username input\n\n                    //omit function removes/omits the value from given object and returns a new object\n                    let newObj = omit(errors, \"username\");\n                    setErrors(newObj);\n                    \n                }\n                break;\n        \n            case 'email':\n                if(\n                    !new RegExp( /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/).test(value)\n                ){\n                    setErrors({\n                        ...errors,\n                        email:'Enter a valid email address'\n                    })\n                }else{\n\n                    let newObj = omit(errors, \"email\");\n                    setErrors(newObj);\n                    \n                }\n            break;\n            \n            case 'password':\n                if(\n                    !new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/).test(value)\n                ){\n                    setErrors({\n                        ...errors,\n                        password:'Password should contains atleast 8 charaters and containing uppercase,lowercase and numbers'\n                    })\n                }else{\n\n                    let newObj = omit(errors, \"password\");\n                    setErrors(newObj);\n                    \n                }\n            break;\n            \n            default:\n                break;\n        }\n    }\n\n\n\n  //A method to handle form inputs\n    const handleChange = (event) => {\n        //To stop default events    \n        event.persist();\n\n        let name = event.target.name;\n        let val = event.target.value;\n        \n        validate(event,name,val);\n\n        //Let's set these values in state\n        setValues({\n            ...values,\n            [name]:val,\n        })\n\n    }\n\n\n    return {\n        values,\n        errors,\n        handleChange,\n    }\n}\n\nexport default useForm;"],"mappings":";;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,QAAnB;;AAGA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAElB;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC,CAHkB,CAIlB;;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;;EAGA,MAAMO,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,KAAwB;IACrC;IAEA,QAAQD,IAAR;MACI,KAAK,UAAL;QACI,IAAGC,KAAK,CAACC,MAAN,IAAgB,CAAnB,EAAqB;UACjB;UAEAL,SAAS,CAAC,EACN,GAAGD,MADG;YAENO,QAAQ,EAAC;UAFH,CAAD,CAAT;QAIH,CAPD,MAOK;UACD;UAEA;UACA,IAAIC,MAAM,GAAGZ,IAAI,CAACI,MAAD,EAAS,UAAT,CAAjB;UACAC,SAAS,CAACO,MAAD,CAAT;QAEH;;QACD;;MAEJ,KAAK,OAAL;QACI,IACI,CAAC,IAAIC,MAAJ,CAAY,uJAAZ,EAAqKC,IAArK,CAA0KL,KAA1K,CADL,EAEC;UACGJ,SAAS,CAAC,EACN,GAAGD,MADG;YAENW,KAAK,EAAC;UAFA,CAAD,CAAT;QAIH,CAPD,MAOK;UAED,IAAIH,MAAM,GAAGZ,IAAI,CAACI,MAAD,EAAS,OAAT,CAAjB;UACAC,SAAS,CAACO,MAAD,CAAT;QAEH;;QACL;;MAEA,KAAK,UAAL;QACI,IACI,CAAC,IAAIC,MAAJ,CAAW,6CAAX,EAA0DC,IAA1D,CAA+DL,KAA/D,CADL,EAEC;UACGJ,SAAS,CAAC,EACN,GAAGD,MADG;YAENY,QAAQ,EAAC;UAFH,CAAD,CAAT;QAIH,CAPD,MAOK;UAED,IAAIJ,MAAM,GAAGZ,IAAI,CAACI,MAAD,EAAS,UAAT,CAAjB;UACAC,SAAS,CAACO,MAAD,CAAT;QAEH;;QACL;;MAEA;QACI;IApDR;EAsDH,CAzDD,CARkB,CAqEpB;;;EACE,MAAMK,YAAY,GAAIV,KAAD,IAAW;IAC5B;IACAA,KAAK,CAACW,OAAN;IAEA,IAAIV,IAAI,GAAGD,KAAK,CAACY,MAAN,CAAaX,IAAxB;IACA,IAAIY,GAAG,GAAGb,KAAK,CAACY,MAAN,CAAaV,KAAvB;IAEAH,QAAQ,CAACC,KAAD,EAAOC,IAAP,EAAYY,GAAZ,CAAR,CAP4B,CAS5B;;IACAjB,SAAS,CAAC,EACN,GAAGD,MADG;MAEN,CAACM,IAAD,GAAOY;IAFD,CAAD,CAAT;EAKH,CAfD;;EAkBA,OAAO;IACHlB,MADG;IAEHE,MAFG;IAGHa;EAHG,CAAP;AAKH,CA7FD;;GAAMhB,O;;AA+FN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}